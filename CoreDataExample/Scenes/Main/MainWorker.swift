//
//  MainWorker.swift
//  CoreDataExample
//
//  Created by Kacper Wygoda on 02.05.2018.
//  Copyright (c) 2018 Kacper Wygoda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import CoreData

class MainWorker {
    
    func changeTaskDonePropertyInTask(task: Task) {
        task.taskDone = !task.taskDone
        PersistenceService.saveContext()
    }
    
    @available(*, renamed: "fetchTasks()")
    func fetchTasks(completion: @escaping([Task]) -> Void) {
        Task {
            let result = await fetchTasks()
            completion(result)
        }
    }
    
    
    func fetchTasks() async -> [Task] {
        let fetchRequest1: NSFetchRequest<Task> = Task.fetchRequest()
        do {
            let taskArray = try PersistenceService.context.fetch(fetchRequest1)
            return taskArray
        } catch let error {
            print("Issues with fetching core data objects:", error)
        }
    }

    func groupeTasks(taskArray: [Task]) -> Main.Tasks {
        var past: [Task] = []
        var today: [Task] = []
        var tomorrow: [Task] = []
        var upcoming7Days: [Task] = []
        
        for element in taskArray {
            if let date = element.date as Date! {
                if Date.isToday(date: date) == true {
                    today.append(element)
                } else if Date.isTomorrow(date: date) == true {
                    tomorrow.append(element)
                } else if Date.isInUpcoming7days(date: date) == true {
                    upcoming7Days.append(element)
                } else if Date.wasInPast(date: date) == true {
                    past.append(element)
                }
            }
        }
        
        past.sort(by: { $0.time.timeIntervalSince1970 < $1.time.timeIntervalSince1970 })
        today.sort(by: { $0.time.timeIntervalSince1970 < $1.time.timeIntervalSince1970 })
        tomorrow.sort(by: { $0.time.timeIntervalSince1970 < $1.time.timeIntervalSince1970 })
        upcoming7Days.sort(by: { $0.time.timeIntervalSince1970 < $1.time.timeIntervalSince1970 })
        
        return Main.Tasks(past: past, today: today, tomorrow: tomorrow, upcoming7Days: upcoming7Days)
    }
}
