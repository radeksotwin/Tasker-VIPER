//
//  MainInteractor.swift
//  CoreDataExample
//
//  Created by Kacper Wygoda on 02.05.2018.
//  Copyright (c) 2018 Kacper Wygoda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainBusinessLogic {
    func fetchTasks(request: Main.FetchData.Request)
    func prepareToRoute(request: Main.PrepareToRoute.Request.RouteToAddTaskVC)
    func updatePickedTask(request: Main.UpdateDataStorage.Request.UpdatePickedTask)
    func deleteTask(request: Main.UpdateDataStorage.Request)
    func markTaskAsDone(request: Main.UpdateDataStorage.Request)
}

protocol MainDataStore {
    var tasks: Main.Tasks! { get set }
    var state: Main.State { get set }
    var pickedTask: Task! { get set }
}

class MainInteractor: MainBusinessLogic, MainDataStore {
    
    var presenter: MainPresentationLogic?
    var worker: MainWorker?
    
    var tasks: Main.Tasks!
    var state: Main.State = .new
    var pickedTask: Task!
    
    func markTaskAsDone(request: Main.UpdateDataStorage.Request) {
        worker = MainWorker()
        guard let employee = worker else { return }
        employee.changeTaskDonePropertyInTask(task: pickedTask)
        let response = Main.UpdateDataStorage.Response()
        presenter?.informAboutChangingTaskDoneProperty(response: response)
    }
    
    func deleteTask(request: Main.UpdateDataStorage.Request) {
        guard let taskToDelete = pickedTask else { return }
        PersistenceService.deleteObject(object: taskToDelete)
        PersistenceService.saveContext()
        let response = Main.UpdateDataStorage.Response()
        presenter?.informAboutObjectsChanges(response: response)
    }
    
    func updatePickedTask(request: Main.UpdateDataStorage.Request.UpdatePickedTask) {
        pickedTask = request.pickedTask
        let response = Main.UpdateDataStorage.Response()
        presenter?.informAboutUpdatedPickedTask(response: response)
    }

    func prepareToRoute(request: Main.PrepareToRoute.Request.RouteToAddTaskVC) {
        state = request.state
        let response = Main.PrepareToRoute.Response.RouteToAddTaskVC(state: state)
        presenter?.prepareToRoute(response: response)
    }
    
    func fetchTasks(request: Main.FetchData.Request) {
        worker = MainWorker()
        guard let employee = worker else { return }
        employee.fetchTasks(completion: { [weak self] (taskArray) in
            guard let me = self else { return }
            me.tasks = employee.groupeTasks(taskArray: taskArray)
            let response = Main.FetchData.Response.FetchTasks(tasks: me.tasks)
            me.presenter?.presentFetchedTasks(response: response)
        })
    }
    
}
