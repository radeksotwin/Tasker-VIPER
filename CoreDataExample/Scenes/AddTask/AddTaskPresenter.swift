//
//  AddTaskPresenter.swift
//  CoreDataExample
//
//  Created by Kacper Wygoda on 02.05.2018.
//  Copyright (c) 2018 Kacper Wygoda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTaskPresentationLogic {
    func presentUpdatedDate(response: AddTask.UpdateDataStroage.Response.UpdateDate)
    func presentUpdatedTime(response: AddTask.UpdateDataStroage.Response.UpdateTime)
    func presentSavedTask(response: AddTask.SaveTask.Response)
    func presentCreatedAlert(response: AddTask.FetchAlert.Response)
    func presentUpdatedColor(response: AddTask.UpdateDataStroage.Response.UpdateColor)
    func presentFetchedTaskComponents(response: AddTask.FetchData.Response)
}

class AddTaskPresenter: AddTaskPresentationLogic {
    weak var viewController: AddTaskDisplayLogic?
    
    func presentFetchedTaskComponents(response: AddTask.FetchData.Response) {
        let viewModel = AddTask.FetchData.ViewModel(task: response.task)
        viewController?.displayFetchedTaskComponents(viewModel: viewModel)
    }
    
    func presentUpdatedColor(response: AddTask.UpdateDataStroage.Response.UpdateColor) {
        let viewModel = AddTask.UpdateDataStroage.ViewModel.UpdateColor(colorIndex: response.colorIndex)
        viewController?.displayUpdatedColor(viewModel: viewModel)
    }
    
    func presentCreatedAlert(response: AddTask.FetchAlert.Response) {
        let viewModel = AddTask.FetchAlert.ViewModel(alert: response.alert)
        viewController?.displayFetchedAlert(viewModel: viewModel)
    }
    
    func presentSavedTask(response: AddTask.SaveTask.Response) {
        let viewModel = AddTask.SaveTask.ViewModel(state: response.state)
        switch response.state {
        case .fail:
            viewController?.fetchAlert(viewModel: viewModel)
        case .success:
            viewController?.dismissAfterSavingData(viewModel: viewModel)
        }
    }
    
    func presentUpdatedDate(response: AddTask.UpdateDataStroage.Response.UpdateDate) {
        let viewModel = AddTask.UpdateDataStroage.ViewModel.UpdateDate(date: response.date)
        viewController?.displayUpdatedDate(viewModel: viewModel)
    }
    
    func presentUpdatedTime(response: AddTask.UpdateDataStroage.Response.UpdateTime) {
        let viewModel = AddTask.UpdateDataStroage.ViewModel.UpdateTime(time: response.time)
        viewController?.displayUpdatedTime(viewModel: viewModel)
    }
}
