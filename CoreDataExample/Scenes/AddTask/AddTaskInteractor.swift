//
//  AddTaskInteractor.swift
//  CoreDataExample
//
//  Created by Kacper Wygoda on 02.05.2018.
//  Copyright (c) 2018 Kacper Wygoda. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AddTaskBusinessLogic {
    func updateDate(request: AddTask.UpdateDataStroage.Request.UpdateDate)
    func updateTime(request: AddTask.UpdateDataStroage.Request.UpdateTime)
    func updateTitle(request: AddTask.UpdateDataStroage.Request.UpdateTitle)
    func updateSubtitle(request: AddTask.UpdateDataStroage.Request.UpdateSubtitle)
    func saveTask(request: AddTask.SaveTask.Request)
    func createAlert(request: AddTask.FetchAlert.Request)
    func updateColor(request: AddTask.UpdateDataStroage.Request.UpdateColor)
    func fetchTaskComponents(request: AddTask.FetchData.Request)
}

protocol AddTaskDataStore {
    var taskToSave: Task! { get set }
    var taskModel: AddTask.TaskModel { get set }
}

class AddTaskInteractor: AddTaskBusinessLogic, AddTaskDataStore {
    
    var presenter: AddTaskPresentationLogic?
    var worker: AddTaskWorker?
    
    var taskToSave: Task!
    var taskModel: AddTask.TaskModel = AddTask.TaskModel()
    
    func fetchTaskComponents(request: AddTask.FetchData.Request) {
        worker = AddTaskWorker()
        guard let employee = worker else { return }
        
        if let task = taskToSave {
            taskModel = employee.fillUpTaskModel(task: task)
        }
        
        let response = AddTask.FetchData.Response(task: taskModel)
        presenter?.presentFetchedTaskComponents(response: response)
    }
    
    func updateColor(request: AddTask.UpdateDataStroage.Request.UpdateColor) {
        taskModel.colorIndex = Int16(request.colorIndex)
        let response = AddTask.UpdateDataStroage.Response.UpdateColor(colorIndex: request.colorIndex)
        presenter?.presentUpdatedColor(response: response)
    }
    
    func createAlert(request: AddTask.FetchAlert.Request) {
        worker = AddTaskWorker()
        guard let employee = worker else { return }
        let alert: UIAlertController = {
            if taskModel.title == "" || taskModel.subtitle == "" {
                return employee.createUnfilledAlert()
            } else {
                return employee.createFilledIncorrectlyAlert()
            }
        }()
        
        let response = AddTask.FetchAlert.Response(alert: alert)
        presenter?.presentCreatedAlert(response: response)
    }
    
    func saveTask(request: AddTask.SaveTask.Request) {
        worker = AddTaskWorker()
        guard let employee = worker else { return }
        let completion: AddTask.Completion!
        
        if taskModel.title != "" && taskModel.subtitle != "" {
            if taskToSave == nil {
                taskToSave = Task(context: PersistenceService.context)
            }
            taskToSave = employee.mergeTaskModelIntoTaskToSave(taskToSave: taskToSave, taskModel: taskModel)
            PersistenceService.saveContext()
            completion = .success
        } else {
            completion = .fail
        }
        
        let response = AddTask.SaveTask.Response(state: completion)
        presenter?.presentSavedTask(response: response)
    }
    
    func updateTitle(request: AddTask.UpdateDataStroage.Request.UpdateTitle) {
        taskModel.title = request.title
    }
    
    func updateSubtitle(request: AddTask.UpdateDataStroage.Request.UpdateSubtitle) {
        taskModel.subtitle = request.subtitle
    }
    
    func updateDate(request: AddTask.UpdateDataStroage.Request.UpdateDate) {
        taskModel.date = request.date as NSDate
        let dateString = Date.convertDateToDateString(date: taskModel.date as Date)
        let resposne = AddTask.UpdateDataStroage.Response.UpdateDate(date: dateString)
        presenter?.presentUpdatedDate(response: resposne)
    }
    
    func updateTime(request: AddTask.UpdateDataStroage.Request.UpdateTime) {
        taskModel.time = request.time as NSDate
        let timeString = Date.convertDateToHourAndMinutes(date: taskModel.time as Date)
        let resposne = AddTask.UpdateDataStroage.Response.UpdateTime(time: timeString)
        presenter?.presentUpdatedTime(response: resposne)
    }
    
}
